

DUTs
----


E_STATES
^^^^^^^^

::

    {attribute 'qualified_only'}
    {attribute 'strict'}
    TYPE E_STATES :
    (
        INIT := 0,
        SETUP,
        OVERRIDE,
        READY,
        NOT_SAFE
    );
    END_TYPE


Related:
    * `E_STATES`_


GVLs
----


GVL_Devices
^^^^^^^^^^^

::

    //{attribute 'qualified_only'}
    VAR_GLOBAL

    // Gauges
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:02 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174_00_09]^AI Standard Channel 1^Value'}
    qRIXS_ROUGH_GPI_02 : FB_MKS275;

    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:11 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[qRIXS_PNL1_E9_EL3174-0002]^AI Standard Channel 1^Value'}
    qRIXS_ROUGH_GPI_11 : FB_MKS275;
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:12 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[qRIXS_PNL1_E7_EL3174-0002]^AI Standard Channel 2^Value'}
    qRIXS_ROUGH_GPI_12 : FB_MKS275;
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:21 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[qRIXS_PNL1_E7_EL3174-0002]^AI Standard Channel 3^Value'}
    qRIXS_ROUGH_GPI_21 : FB_MKS275;

    // Gauges
    //GCC
    {attribute 'TcLinkTo' := 	'    .i_iPRESS_R		:=	TIIB[EL3174-0002_01_23]^AI Standard Channel 1^Value;
                                     .i_xHV_ON			:=	TIIB[EL1124_01_22]^Channel 1^Input;
                                     .i_xDisc_Active	:=	TIIB[EL1124_01_22]^Channel 2^Input;
                                     .q_xHV_DIS			:=	TIIB[EL2624_01_18]^Channel 1^Output
        '}
        {attribute 'pytmc' := '
            pv: QRIXS:SC:GCC:01 '}
    qRIXS_SC_GCC_01: FB_MKS500;
    //GPI
    {attribute 'pytmc' := ' pv: QRIXS:SC:GPI:01 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_01_23]^AI Standard Channel 2^Value'}
    qRIXS_SC_GPI_01 : FB_MKS275;
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:31 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_01_23]^AI Standard Channel 3^Value'}
    qRIXS_ROUGH_GPI_31 : FB_MKS275;


    {attribute 'pytmc' := '
        pv: QRIXS:SSL:GCP:20
        io: io
    '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_01_24]^AI Standard Channel 1^Value'}
    qRIXS_SSL_GCP_20: FB_972;

    {attribute 'pytmc' := '
        pv: QRIXS:SSL:GCP:30
        io: io
    '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_01_24]^AI Standard Channel 2^Value'}
    qRIXS_SSL_GCP_30: FB_972;

    //MKS-275
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:03 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_02_13]^AI Standard Channel 2^Value'}
    qRIXS_ROUGH_GPI_03 : FB_MKS275;
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:04 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_02_13]^AI Standard Channel 3^Value'}
    qRIXS_ROUGH_GPI_04 : FB_MKS275;
    {attribute 'pytmc' := ' pv: QRIXS:SDS:GPI:01 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_02_13]^AI Standard Channel 1^Value'}
    qRIXS_SDS_GPI_01 : FB_MKS275;



    //Valves
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_00_12]^Channel 1^Input;
                                 .i_xClsLS	:=	TIIB[EL1004_00_12]^Channel 2^Input;
                                 .q_xOPN_DO	:=	TIIB[EL2004_00_13]^Channel 1^Output
        '}
    {attribute 'pytmc' := '
            pv: QRIXS:ROUGH:VRC:01
            io: io
        '}
    qRIXS_ROUGH_VRC_01: FB_VRC;
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_00_12]^Channel 3^Input;
                                 .i_xClsLS	:=	TIIB[EL1004_00_12]^Channel 4^Input;
                                 .q_xOPN_DO	:=	TIIB[EL2004_00_13]^Channel 2^Output
        '}
    {attribute 'pytmc' := '
            pv: QRIXS:ROUGH:VRC:02
            io: io
        '}
    qRIXS_ROUGH_VRC_02: FB_VRC;
    {attribute 'pytmc' := '
        pv: QRIXS:SA:VRC:01
    '}
    qRIXS_SA_VRC_01 : FB_VRC_NO_FFO; // Is the Window valve NO


    //// Connected to B950-310-WALL-W-DRL-02 (Mechanical Room )
    {attribute 'pytmc' := ' pv: QRIXS:PRO:01 '}
    {attribute 'TcLinkTo' := '.q_xMPStart := TIIB[EL2794_03_03]^Channel 1^Output;
                              .q_xBPStart := TIIB[EL2794_03_03]^Channel 2^Output;
                              .i_xMPStatus := TIIB[EL1088_03_01]^Channel 1^Input;
                              .i_xBPStatus := TIIB[EL1088_03_01]^Channel 2^Input;
                              .i_xWarning := TIIB[EL1088_03_01]^Channel 3^Input;
                              .i_xAlarmOK := TIIB[EL1088_03_01]^Channel 4^Input;
                              .i_xRemote := TIIB (EL1088_03_01]^Channel 5^Input
    '}
    qRIXS_PRO_01 : FB_EbaraDryPump;
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:GPI:01 '}
    {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[EL3174-0002_03_07]^AI Standard Channel 4^Value'}
    qRIXS_ROUGH_GPI_01 : FB_MKS275;

    //VRO
    {attribute 'pytmc' := ' pv: QRIXS:ROUGH:VRO:01 '}
    {attribute 'TcLinkTo' := 	'.q_xOPN_DO	:=	TIIB[EL2212_03_04]^DOX Control Channel 1^Control^Output'}
    QRIX_ROUGH_VRO_01 : FB_VVC;


    //VRC
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_01]^Channel 1^Input;
                                .i_xClsLS	:=	TIIB[EL1004_01_01]^Channel 2^Input;
                                .q_xOPN_DO	:=	TIIB[EL2004_01_02]^Channel 1^Output
    '}
    {attribute 'pytmc' := ' pv: QRIXS:SC:VRC:10 '}
    qRIXS_SC_VRC_10 : FB_VRC;

    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_01]^Channel 3^Input;
                                .i_xClsLS	:=	TIIB[EL1004_01_01]^Channel 4^Input;
                                .q_xOPN_DO	:=	TIIB[EL2004_01_02]^Channel 2^Output
    '}
    {attribute 'pytmc' := ' pv: QRIXS:SC:VRC:20 '}
    qRIXS_SC_VRC_20 : FB_VRC;
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_03]^Channel 1^Input;
                                .i_xClsLS	:=	TIIB[EL1004_01_03]^Channel 2^Input;
                                .q_xOPN_DO	:=	TIIB[EL2004_01_04]^Channel 4^Output
    '}
    {attribute 'pytmc' := ' pv: QRIX:SC:VRC:30 '}
    qRIXS_SC_VRC_30 : FB_VRC;
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_09]^Channel 1^Input;
                                .i_xClsLS	:=	TIIB[EL1004_01_09]^Channel 2^Input;
                                .q_xOPN_DO	:=	TIIB[EL2004_01_10]^Channel 1^Output
    '}
    {attribute 'pytmc' := ' pv: QRIX:SC:VRC:31 '}
    qRIXS_SC_VRC_31 : FB_VRC;
    //VGC
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_07]^Channel 3^Input;
                                 .i_xClsLS	:=	TIIB[EL1004_01_07]^Channel 4^Input;
                                 .q_xOPN_DO	:=	TIIB[EL2004_01_08]^Channel 1^Output
        '}
    {attribute 'pytmc' := '
            pv: QRIX:SC:VGC:01
            io: io
        '}
    qRIXS_SC_VGC_01 : FB_VGC;
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_09]^Channel 3^Input;
                                 .i_xClsLS	:=	TIIB[EL1004_01_09]^Channel 4^Input;
                                 .q_xOPN_DO	:=	TIIB[EL2004_01_08]^Channel 2^Output
        '}
    {attribute 'pytmc' := '
            pv: QRIX:SC:VGC:02
            io: io
        '}
    qRIXS_SC_VGC_02 : FB_VGC;
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_03]^Channel 3^Input;
                                 .i_xClsLS	:=	TIIB[EL1004_01_03]^Channel 4^Input;
                                 .q_xOPN_DO	:=	TIIB[EL2004_01_02]^Channel 4^Output;
                                 .q_xCls_DO	:=	TIIB[EL2004_01_02]^Channel 3^Output
        '}
    {attribute 'pytmc' := '
            pv: QRIX:SC:VGC:03
            io: io
        '}
    qRIXS_SC_VGC_03 : FB_VGC;
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_05]^Channel 1^Input;
                                 .i_xClsLS	:=	TIIB[EL1004_01_05]^Channel 2^Input;
                                 .q_xOPN_DO	:=	TIIB[EL2004_01_04]^Channel 1^Output
        '}
    {attribute 'pytmc' := ' pv: QRIXS:SC:VGC:04 '}
    qRIXS_SC_VGC_04 : FB_VGC;
    {attribute 'pytmc' := ' pv: QRIXS:SC:VGC:05 '}
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_01_05]^Channel 3^Input;
                                 .i_xClsLS	:=	TIIB[EL1004_01_05]^Channel 4^Input;
                                 .q_xOPN_DO	:=	TIIB[EL2004_01_04]^Channel 2^Output
        '}
    qRIXS_SC_VGC_05 : FB_VGC;
    //VVC
    {attribute 'TcLinkTo' := 	'.q_xOPN_DO	:=	TIIB[qRIXS_PNL1_E1_EL1004]^Channel 1^Input }
    {attribute 'pytmc' := ' pv: QRIXS:SC:VVC:01 '}
    qRIXS_SC_VVC_01 : FB_VVC;
    {attribute 'pytmc' := ' pv: QRIXS:SC:VVC:02 '}
    qRIXS_SC_VVC_02 : FB_VVC;
    //PTM
    {attribute 'TcLinkTo' := 	'.i_xAtSpd			:=	TIIB[EL1004_01_13]^Channel 1^Input;
                                 .i_xFaultNC		:=	TIIB[EL1004_01_13]^Channel 3^Input;
                                 .i_xRemote			:=	TIIB[EL1004_01_13]^Channel 2^Input;
                                 .q_RunDO			:=	TIIB[EL2004_01_12]^Channel 1^Output;
                                 .q_xRemote			:=	TIIB[EL2004_01_12]^Channel 2^Output;
                                 .q_PumpingStation	:=	TIIB[EL2004_01_12]^Channel 3^Output;
    '}


    //VRC
    {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[EL1004_02_01]^Channel 1^Input;
                                .i_xClsLS	:=	TIIB[EL1004_02_01]^Channel 2^Input;
                                .q_xCLS_DO	:=	TIIB[EL2004_02_02]^Channel 1^Output
    '}
    {attribute 'pytmc' := ' pv: QRIXS:SDS:VRC:01 '}
    qRIXS_SDS_VRC_01 : FB_VRC;
    //VVC
    {attribute 'pytmc' := ' pv: QRIXS:SDS:VVC:01 '}
    qRIXS_SDS_VVC_01 : FB_VVC;
    {attribute 'pytmc' := ' pv: QRIXS:SDS:VVC:02 '}
    qRIXS_SDS_VVC_02 : FB_VVC;






    //VRC

    {attribute 'pytmc' := '
            pv: QRIXS:SC:VRC:01
            io: io
        '}
    qRIXS_SC_VRC_01: FB_VRC;


    {attribute 'pytmc' := '
            pv: QRIXS:SDS:VRC:31
            io: io
        '}
    qRIXS_SDS_VRC_31: FB_VRC;



    //Turbo Pumps
    {attribute 'pytmc' := '
            pv: QRIXS:SC:PTM:10
            io: io
    '}
    {attribute 'TcLinkTo' := 	'.i_xAtSpd			:=	TIIB[EL1004_01_13]^Channel 1^Input;
                                 .i_xRemote		    :=	TIIB[EL1004_01_13]^Channel 2^Input;
                                 .i_xFaultNC		:=	TIIB[EL1004_01_13]^Channel 3^Input;
                                 .q_RunDO			:=	TIIB[EL2004_01_12]^Channel 1^Output;
                                 .q_xRemote			:=	TIIB[EL2004_01_12]^Channel 2^Output;
                                .q_PumpingStation	:=	TIIB[EL2004_01_12]^Channel 3^Output
    '}
    qRIXS_SC_PTM_10 : FB_PTM_Pfeiffer;
    {attribute 'TcLinkTo' := 	'.i_xAtSpd			:=	TIIB[EL1004_01_16]^Channel 2^Input;
                                 .i_xFaultNC		:=	TIIB[EL1004_01_16]^Channel 1^Input;
                                 .q_RunDO			:=	TIIB[EL2794_01_15]^Channel 1^Output;
                                 .q_xReset			:=	TIIB[EL2794_01_15]^Channel 2^Output
    '}
    {attribute 'pytmc' := '
            pv: QRIXS:SC:PTM:20
            io: io
    '}
    qRIXS_SC_PTM_20 : FB_PTM_Pfeiffer;
    {attribute 'pytmc' := '
            pv: QRIXS:SC:PTM:30
            io: io
    '}
    {attribute 'TcLinkTo' := 	'.i_xAtSpd			:=	TIIB[EL1004_01_16]^Channel 4^Input;
                                 .i_xFaultNC		:=	TIIB[EL1004_01_16]^Channel 3^Input;
                                 .q_RunDO			:=	TIIB[EL2794_01_15]^Channel 3^Output;
                                 .q_xReset			:=	TIIB[EL2794_01_15]^Channel 4^Output
    '}
    qRIXS_SC_PTM_30 : FB_PTM_Pfeiffer;
    //PTM- Turbo Pump
    {attribute 'TcLinkTo' := 	'.i_xAtSpd			:=	TIIB[qRIXS_PLC_EP01_EP2338-0002]^Channel 1^Input;
                                 .i_xFaultNC		:=	TIIB[qRIXS_PLC_EP01_EP2338-0002]^Channel 2^Input;
                                 .i_xRemote			:=	TIIB[qRIXS_PLC_EP01_EP2338-0002]^Channel 3^Input;
                                 .q_RunDO			:=	TIIB[qRIXS_PLC_EP02_EP2624-0002]^Channel 1^Output;
                                 .q_xReset 			:=	TIIB[qRIXS_PLC_EP02_EP2624-0002]^Channel 2^Output
    '}
    {attribute 'pytmc' := '
            pv: QRIXS:SDS:PTM:10
            io: io
    '}
    qRIXS_SDS_PTM_10 : FB_PTM_Pfeiffer;





    //Ion Pump Controller
    {attribute 'pytmc' := '
        pv: QRIXS:SC:PIP:01
        io: io
    '}
    {attribute 'TcLinkTo' := 	'.q_xHVEna_DO	:=	TIIB[EL2794_00_04]^Channel 1^Output;
                                 .i_iPRESS		:=	TIIB[EL3064_00_03]^AI Standard Channel 1^Value;
                                 .i_xSP_DI		:=	TIIB[EL1004_00_05]^Channel 1^Input
    '}
    qRIXS_SC_PIP_01: FB_PIP_Gamma;
    {attribute 'pytmc' := '
        pv: QRIXS:SC:PIP:02
        io: io
    '}
    {attribute 'TcLinkTo' := 	'.q_xHVEna_DO	:=	TIIB[EL2794_00_04]^Channel 2^Output;
                                 .i_iPRESS		:=	TIIB[EL3064_00_03]^AI Standard Channel 2^Value;
                                 .i_xSP_DI		:=	TIIB[EL1004_00_05]^Channel 2^Input
    '}
    qRIXS_SC_PIP_02: FB_PIP_Gamma;

    {attribute 'pytmc' := '
        pv: QRIXS:OPT:PIP:01
        io: io
    '}
    {attribute 'TcLinkTo' := 	'.q_xHVEna_DO	:=	TIIB[EL2794_00_04]^Channel 3^Output;
                                 .i_iPRESS		:=	TIIB[EL3064_00_03]^AI Standard Channel 3^Value;
                                 .i_xSP_DI		:=	TIIB[EL1004_00_05]^Channel 3^Input
    '}

    qRIXS_OPT_PIP_01: FB_PIP_Gamma;

    {attribute 'pytmc' := '
        pv: QRIXS:DET:PIP:01
        io: io
    '}
    {attribute 'TcLinkTo' := 	'.q_xHVEna_DO	:=	TIIB[EL2794_00_04]^Channel 4^Output;
                                 .i_iPRESS		:=	TIIB[EL3064_00_03]^AI Standard Channel 4^Value;
                                 .i_xSP_DI		:=	TIIB[EL1004_00_05]^Channel 4^Input
    '}
    qRIXS_DET_PIP_01: FB_PIP_Gamma;



    END_VAR




GVL_PMPS
^^^^^^^^

::

    {attribute 'qualified_only'}
    VAR_GLOBAL
        {attribute 'pytmc' := 'pv: PLC:QRIX:VAC:ARB'}
        fbArbiter: FB_Arbiter(1);
        {attribute 'pytmc' := 'pv: PLC:QRIX:VAC:FFO:01'}
        {attribute 'TcLinkTo' := '.q_xFastFaultOut:=TIIB[PMPS_FFO]^Channel 1^Output'}
        fbFastFaultOutput1: FB_HardwareFFOutput := (bAutoReset := TRUE, i_sNetID:='172.21.92.73.1.1');
        {attribute 'pytmc' := 'pv: PLC:QRIX:VAC:FFO:02'}
        {attribute 'TcLinkTo' := '.q_xFastFaultOut:=TIIB[PMPS_FFO]^Channel 2^Output'}
        fbFastFaultOutput2: FB_HardwareFFOutput := (bAutoReset := TRUE, i_sNetID:='172.21.92.73.1.1');
    END_VAR




GVL_SA
^^^^^^

::

    //{attribute 'qualified_only'}
    VAR_GLOBAL


        (* -- Normally Closed Valve with Readback -- *)
        {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[qRIXS_PNL1_E1_EL1004]^Channel 1^Input;
                                     .i_xClsLS	:=	TIIB[qRIXS_PNL1_E1_EL1004]^Channel 2^Input;
                                     .q_xOPN_DO	:=	TIIB[qRIXS_PNL1_E3_EL2004]^Channel 1^Output
        '}
        {attribute 'pytmc' := '
            pv: QRIXS:OPT:VGC:01
            io: io
        '}
        qRIXS_OPT_VGC_01: FB_VGC;

        {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[qRIXS_PNL1_E1_EL1004]^Channel 3^Input;
                                     .i_xClsLS	:=	TIIB[qRIXS_PNL1_E1_EL1004]^Channel 4^Input;
                                     .q_xOPN_DO	:=	TIIB[qRIXS_PNL1_E3_EL2004]^Channel 2^Output
        '}
        {attribute 'pytmc' := '
            pv: QRIXS:BLW:VRC:01
            io: io
        '}
        qRIXS_SA_VWC_01: FB_VRC;

        {attribute 'TcLinkTo' := 	'.i_xOpnLS	:=	TIIB[qRIXS_PNL1_E2_EL1004]^Channel 1^Input;
                                     .i_xClsLS	:=	TIIB[qRIXS_PNL1_E2_EL1004]^Channel 2^Input;
                                     .q_xOPN_DO	:=	TIIB[qRIXS_PNL1_E3_EL2004]^Channel 3^Output
        '}
        {attribute 'pytmc' := '
            pv: QRIXS:DET:VRC:01
            io: io
        '}
        qRIXS_DET_VRC_01: FB_VRC;


        (* MKS275 - Pirani *)
        {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[qRIXS_PNL1_E5_EL3174-0002]^AI Standard Channel 1^Value'}
        {attribute 'pytmc' := '
            pv: QRIXS:OPT:GPI:01
            io: io
        '}
        qRIXS_OPT_GPI_01: FB_MKS275;

        {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[qRIXS_PNL1_E5_EL3174-0002]^AI Standard Channel 2^Value'}
        {attribute 'pytmc' := '
            pv: QRIXS:DET:GPI:01
            io: io
        '}
        qRIXS_DET_GPI_01: FB_MKS275;


        (* MKS972 - Full range guage *)
        {attribute 'TcLinkTo' := 	'.i_iPRESS_R	:=	TIIB[qRIXS_PNL1_E5_EL3174-0002]^AI Standard Channel 3^Value'}
        {attribute 'pytmc' := '
            pv: QRIXS:SA:GCP:01
            io: io
        '}
        qRIXS_SA_GCP_01: FB_972;


        (* MKS500 - Cold cathode gauge *)
        {attribute 'TcLinkTo' := 	'.i_iPRESS_R		:=	TIIB[qRIXS_PNL1_E6_EL3174-0002]^AI Standard Channel 1^Value;
                                     .i_xHV_ON			:=	TIIB[qRIXS_PNL1_E8_EL1124]^Channel 1^Input;
                                     .i_xDisc_Active	:=	TIIB[qRIXS_PNL1_E8_EL1124]^Channel 2^Input;
                                     .q_xHV_DIS			:=	TIIB[qRIXS_PNL1_E4_EL2624]^Channel 1^Output
        '}
        {attribute 'pytmc' := '
            pv: QRIXS:OPT:GCC:01
            io: io
        '}
        qRIXS_OPT_GCC_01: FB_MKS500;


        {attribute 'TcLinkTo' := 	'.i_iPRESS_R		:=	TIIB[qRIXS_PNL1_E6_EL3174-0002]^AI Standard Channel 2^Value;
                                     .i_xHV_ON			:=	TIIB[qRIXS_PNL1_E8_EL1124]^Channel 3^Input;
                                     .i_xDisc_Active	:=	TIIB[qRIXS_PNL1_E8_EL1124]^Channel 4^Input;
                                     .q_xHV_DIS			:=	TIIB[qRIXS_PNL1_E4_EL2624]^Channel 2^Output
        '}
        {attribute 'pytmc' := '
            pv: QRIXS:DET:GCC:01
            io: io
        '}
        qRIXS_DET_GCC_01: FB_MKS500;
    END_VAR




GVL_Variables
^^^^^^^^^^^^^

::

    VAR_GLOBAL

    {attribute 'pytmc' := '
        pv: PLC:QRIXS:VAC:OVRDON
        io: io
    '}
    xSystemOverrideMode	: BOOL := FALSE; (* Global system override for the qRIXS Vacuum System*)


    {attribute 'pytmc' := '
        pv: QRIXS:VAC:OVRDON
        io: io
    '}
    xSystemOverrideMode_Valve	: BOOL := FALSE; (* Global system override for the qRIXS Vacuum System*)

    {attribute 'pytmc' := ' pv: QRIXS:SA:VAC:SETUP_MODE'}
    SetupMode_Valve	: BOOL := FALSE;




    END_VAR




POUs
----


FB_ChemRIXS_Turbo_ILK
^^^^^^^^^^^^^^^^^^^^^

::

    FUNCTION_BLOCK FB_ChemRIXS_Turbo_ILK
    VAR_INPUT
        i_stValve : ST_ValveBase;
        i_stPump : ST_PTM;
        tDelay : TIME;
    END_VAR
    VAR_OUTPUT
        bILK : BOOL;
    END_VAR
    VAR
        tofDelay : TOF;
    END_VAR
    tofDelay.IN := i_stValve.i_xOpnLS OR (i_stPump.eState = pumpSTOPPED); // Start timer when valve closes (IN goes low)
    tofDelay.PT := tDelay;
    tofDelay();
    bILK := tofDelay.Q; // Assign turbopump output to timer output. When the valve is closed the turbo pump ILK will go False after time elapses.
                        // Intended to be connected to pump OK to run bit.

    END_FUNCTION_BLOCK




Main
^^^^

::

    PROGRAM Main
    VAR
    END_VAR
    ///Calling programs
    PRG_Roughing();
    PRG_SampleChamber();
    PRG_SA_WINDOW();
    //PRG_SDS();
    PRG_SPA();
    PRG_2_PMPS();
    PRG_3_LOG();

    END_PROGRAM


Related:
    * `PRG_2_PMPS`_
    * `PRG_3_LOG`_
    * `PRG_Roughing`_
    * `PRG_SA_WINDOW`_
    * `PRG_SDS`_
    * `PRG_SPA`_
    * `PRG_SampleChamber`_


PRG_2_PMPS
^^^^^^^^^^

::

    PROGRAM PRG_2_PMPS
    VAR
        fbArbiterIO: FB_SubSysToArbiter_IO;
    END_VAR
    GVL_PMPS.fbFastFaultOutput1.Execute();
    GVL_PMPS.fbFastFaultOutput2.Execute();
    fbArbiterIO(
        Arbiter:=GVL_PMPS.fbArbiter,
        fbFFHWO:=GVL_PMPS.fbFastFaultOutput1);

    END_PROGRAM


Related:
    * `GVL_PMPS`_


PRG_3_LOG
^^^^^^^^^

::

    PROGRAM PRG_3_LOG
    VAR
          fbLogHandler: FB_LogHandler;
    END_VAR
    fbLogHandler();

    END_PROGRAM




PRG_Roughing
^^^^^^^^^^^^

::

    PROGRAM PRG_Roughing
    VAR
    END_VAR
    // Roughing devices
    //MKS 275 Gauges
    qRIXS_ROUGH_GPI_01.M_SetBits(30518);
    qRIXS_ROUGH_GPI_01();			// Roughing guage near pro
    qRIXS_ROUGH_GPI_02.M_SetBits(30518);
    qRIXS_ROUGH_GPI_02();			// Roughing guage near BL


    //VRC 02	backing Main Sample Chamber
    qRIXS_ROUGH_VRC_02(i_xExtILK_OK :=  qRIXS_PRO_01.stPump.eState = E_PumpState.pumpRUNNING, i_xOverrideMode := xSystemOverrideMode, iq_stValve => );

    //VRC 01 backing Sample Delivery Chamber
    qRIXS_ROUGH_VRC_01(i_xExtILK_OK := qRIXS_PRO_01.stPump.eState = E_PumpState.pumpRUNNING, i_xOverrideMode := xSystemOverrideMode, iq_stValve => );


    qRIXS_PRO_01(i_stBPGauge := qRIXS_ROUGH_GPI_01.PG, i_xVlvOpn := TRUE, i_xExtIlkOK := TRUE);


    if( qRIXS_PRO_01.stPump.eState = pumpSTARTING ) OR ( qRIXS_PRO_01.stPump.eState = pumpRUNNING )
     THEN QRIX_ROUGH_VRO_01.M_Open(TRUE);
    END_IF
    QRIX_ROUGH_VRO_01(i_xExtILK_OK:= (qRIXS_PRO_01.stPump.eState = pumpRUNNING  OR  qRIXS_PRO_01.stPump.eState = pumpSTARTING ), i_xOverrideMode:= , iq_stValve=> );

    END_PROGRAM


Related:
    * `Main`_


PRG_SA_WINDOW
^^^^^^^^^^^^^

::

    PROGRAM PRG_SA_WINDOW
    VAR
            xFirstPass		: BOOL;
        fbFSInit		: R_TRIG;

        state			: E_STATES;

        bExtPress : BOOL;

        g_FastFaultOutputNA: FB_HardwareFFOutput;
        g_fbArbiterNA: FB_Arbiter(2);

        xExtILK_OK_BLW: INT;
    END_VAR
    fbFSInit( CLK := TRUE, Q => xFirstPass);
    (* On first PLC pass, put valve into init state*)
    IF xFirstPass THEN
        state:= E_STATES.INIT;
        xSystemOverrideMode_Valve := FALSE;
        SetupMode_Valve := FALSE;
    END_IF
    bExtPress:= qRIXS_SA_GCP_01.PG.xAT_VAC;


    //STATE ACTIONS
    CASE state OF

     E_STATES.INIT:
            qRIXS_SC_VGC_04.M_Set_OPN_SW(FALSE); //Isolation Valve closed
            qRIXS_SA_VRC_01.M_Set_CLS_SW(FALSE); // Window valve OPEN
            qRIXS_SC_VGC_04.i_xOverrideMode := qRIXS_SA_VRC_01.i_xOverrideMode := FALSE;
            //Transition
            if (qRIXS_SC_VGC_04.M_IsClosed() AND qRIXS_SA_VRC_01.M_IsOpen()) THEN
                state:= E_STATES.NOT_SAFE;
            END_IF

    E_STATES.NOT_SAFE: // System is not allowed to actuate, i.e all interlocks are in effect
        qRIXS_SC_VGC_04.M_Set_OPN_SW(qRIXS_SC_VGC_04.iq_stValve.q_xOPN_DO );
         //C_1.i_xExt_OK := VGC_1.i_xEPS_OPN_OK := VGC_1.i_xEPS_CLS_OK:= FALSE;
        qRIXS_SA_VRC_01.i_xExtILK_OK:= FALSE;
        qRIXS_SC_VGC_04.i_xOverrideMode := qRIXS_SA_VRC_01.i_xOverrideMode := FALSE;

        //Transition
        //IF (US_GCC.IG.xAT_VAC AND DS_GCC.IG.xAT_VAC) THEN state:= E_STATES.READY; END_IF
        IF (bExtPress AND qRIXS_SC_GCC_01.IG.xAT_VAC) THEN state:= E_STATES.READY; END_IF



     E_STATES.READY: // OK to MOVE
         // Release the external interlock so the differential pressure inlk is in effect
         qRIXS_SC_VGC_04.i_xExt_OK:= qRIXS_SC_VGC_04.i_xEPS_OK :=TRUE;
        //permission to insert window valve only when US vacuum is good??
        qRIXS_SA_VRC_01.i_xExtILK_OK:= bExtPress;
        // Valves  alternate positions.
        If (qRIXS_SA_VRC_01.M_IsClosed()) THEN  qRIXS_SC_VGC_04.M_Set_OPN_SW(TRUE);
        ELSIF (qRIXS_SA_VRC_01.M_IsOpen()) THEN qRIXS_SC_VGC_04.M_Set_OPN_SW(FALSE);
        END_IF

    // bOverride := TRUE;
     E_STATES.OVERRIDE:
        // Override Mode is enabled for all valves
         qRIXS_SC_VGC_04.i_xOverrideMode :=qRIXS_SA_VRC_01.i_xOverrideMode := TRUE;
        // Exit of Override mode always goes back to init
         IF NOT(xSystemOverrideMode_Valve) THEN state:= E_STATES.INIT; END_IF


     E_STATES.SETUP:
        // Window valve remains retracted
         qRIXS_SA_VRC_01.i_xExtILK_OK := FALSE;
        // Isolation valves operates like standard gate valves
        qRIXS_SC_VGC_04.i_xExt_OK := TRUE;
        // exit to init just to be safe?
        IF NOT(SetupMode_Valve) THEN state:= E_STATES.INIT; END_IF
    END_CASE


    // STATE TRANSITIONS
    // the system can go to setup state from any other state except override
    IF (SetupMode_Valve) AND (state<>E_STATES.OVERRIDE) THEN state:= E_STATES.SETUP;
    // the system can go to override state from any other state except setup
    ELSIF (xSystemOverrideMode_Valve) AND (state<>E_STATES.SETUP) THEN state:= E_STATES.OVERRIDE;
    //Loss of at vac signal makes the system go to init/not safe to move state
    ELSIF (NOT bExtPress) OR (NOT qRIXS_SC_GCC_01.IG.xAT_VAC) THEN state:= E_STATES.INIT;
    //ELSIF (NOT US_GCC.IG.xAT_VAC) OR (NOT DS_GCC.IG.xAT_VAC) THEN state:= E_STATES.INIT;
    END_IF




    qRIXS_SC_VGC_04(
        i_stUSG:= qRIXS_SC_GCC_01.IG ,
        i_stDSG:= qRIXS_OPT_GCC_01.IG ,
        i_xDis_DPIlk:= FALSE ,
        i_xPMPS_OK:= TRUE ,
        i_xEPS_OK:= ,
        i_xExt_OK:= ,
        i_xOverrideMode:= ,
        i_xReset:= ,
        i_xIsAperture:= TRUE,
        i_sDevName:= ,
        i_nTransitionRootID:= ,
        iq_stValve=> ,
        xMPS_OK=> ,
        io_fbFFHWO:=g_FastFaultOutputNA ,
        fbArbiter:= g_fbArbiterNA
    );


    qRIXS_SA_VRC_01(
        i_xExtILK_OK:= ,
        i_xOverrideMode:= ,
        iq_stValve=> ,
        io_fbFFHWO:= g_FastFaultOutputNA ,
        fbArbiter:= g_fbArbiterNA,
        i_xPMPS_OK:= TRUE,
        i_xIsAperture:= TRUE ,
        i_sDevName:= ,
        i_nTransitionRootID:= );


    //VGC_W(i_xExtILK_OK:= ,
    //	i_xOverrideMode:= ,
     //   iq_stValve=> );

    END_PROGRAM


Related:
    * `E_STATES`_


PRG_SampleChamber
^^^^^^^^^^^^^^^^^

::

    PROGRAM PRG_SampleChamber
    VAR
        QRIX: T_MaxString;
        iWatchdog: UDINT;
        RIX_TV4K2_GFS_1:FB_TGCC_ADS;
        RIX_IM5K2_PPM_GCC_1:FB_TGCC_ADS;

        //PTM interlocks
        qRIXS_SC_PTM_10_ILK : FB_ChemRIXS_Turbo_ILK;
        qRIXS_SC_PTM_20_ILK : FB_ChemRIXS_Turbo_ILK;
        qRIXS_SC_PTM_30_ILK : FB_ChemRIXS_Turbo_ILK;
    END_VAR
    //ADS interfaces
    RIX_TV4K2_GFS_1(
        sNetId:= '172.21.140.69.1.1',
        nPort:= 851,
        sVarName:= 'GVL_KFE_RIX_VAC.fb_TV4K2_GFS_1',
        iWatchdog:= iWatchdog ,
        IG=> ,
        bError=> );
    RIX_IM5K2_PPM_GCC_1(
        sNetId:= '172.21.140.69.1.1',
        nPort:= 851,
        sVarName:= 'GVL_KFE_RIX_VAC.fb_IM5K2_PPM_GCC_1',
        iWatchdog:= iWatchdog ,
        IG=> ,
        bError=> );

    //MKS 275 Gauges
    qRIXS_SC_GPI_01.M_SetBits(30518);
    qRIXS_SC_GPI_01(PG=>);
    qRIXS_ROUGH_GPI_11(PG=>);
    qRIXS_ROUGH_GPI_12(PG=>);
    qRIXS_ROUGH_GPI_21(PG=>);
    qRIXS_ROUGH_GPI_31.M_SetBits(30518);
    qRIXS_ROUGH_GPI_31(PG=>);
    //fb_QRIX_ROUGH_GPI_22(PG=>);
    qRIXS_SC_GCC_01.M_SetBits(30518);
    qRIXS_SC_GCC_01(PG := qRIXS_SC_GPI_01.PG);
    qRIXS_SSL_GCP_20.M_SetBits(30518);
    qRIXS_SSL_GCP_20();
    qRIXS_SSL_GCP_30.M_SetBits(30518);
    qRIXS_SSL_GCP_30();

    //ION Pumps
    qRIXS_SC_PIP_01(i_stGauge:=qRIXS_SC_GPI_01.PG, i_xOverrideMode:= xSystemOverrideMode);
    qRIXS_SC_PIP_02(i_stGauge:=qRIXS_SC_GPI_01.PG, i_xOverrideMode:= xSystemOverrideMode);

    //Pfiffer Turbo

    //VVC
    qRIXS_SC_VVC_01.i_xExtILK_OK := qRIXS_SC_PTM_10.iq_stPTM.eState = E_PumpState.pumpSTOPPED
                                AND qRIXS_SC_PTM_20.iq_stPTM.eState = E_PumpState.pumpSTOPPED
                                AND qRIXS_SC_PTM_30.iq_stPTM.eState = E_PumpState.pumpSTOPPED;
    qRIXS_SC_VVC_01(i_xExtILK_OK := , i_xOverrideMode := xSystemOverrideMode, iq_stValve => );
    qRIXS_SC_VVC_02.i_xExtILK_OK := qRIXS_SC_PTM_10.iq_stPTM.eState = E_PumpState.pumpSTOPPED
                                AND qRIXS_SC_PTM_20.iq_stPTM.eState = E_PumpState.pumpSTOPPED
                                AND qRIXS_SC_PTM_30.iq_stPTM.eState = E_PumpState.pumpSTOPPED;
    qRIXS_SC_VVC_02(i_xExtILK_OK := , i_xOverrideMode := xSystemOverrideMode, iq_stValve => );

    //VGC Valves
    ///VGC on Beamline
    qRIXS_SC_VGC_01(
        i_stUSG:= RIX_TV4K2_GFS_1.IG,
        i_stDSG:= qRIXS_SC_GCC_01.IG,
        i_xDis_DPIlk:= FALSE ,
        i_xPMPS_OK:= TRUE ,
        i_xEPS_OK:= TRUE,
        i_xExt_OK:= TRUE,
        i_xOverrideMode:= xSystemOverrideMode ,
        i_xReset:= ,
        i_xIsAperture:= FALSE,
        i_sDevName:= 'QRIX:SC:VGC:01',
        i_nTransitionRootID:= ,
        iq_stValve=> ,
        xMPS_OK=> ,
        io_fbFFHWO:= GVL_PMPS.fbFastFaultOutput1 ,
        fbArbiter:= GVL_PMPS.fbArbiter );

    qRIXS_SC_VGC_02(
        i_stUSG:= qRIXS_SC_GCC_01.IG,
        i_stDSG:= RIX_IM5K2_PPM_GCC_1.IG,
        i_xDis_DPIlk:= FALSE ,
        i_xPMPS_OK:= TRUE ,
        i_xEPS_OK:= TRUE,
        i_xExt_OK:= TRUE,
        i_xOverrideMode:= xSystemOverrideMode ,
        i_xReset:= ,
        i_xIsAperture:= FALSE,
        i_sDevName:= 'QRIX:SC:VGC:02',
        i_nTransitionRootID:= ,
        iq_stValve=> ,
        xMPS_OK=> ,
        io_fbFFHWO:= GVL_PMPS.fbFastFaultOutput1 ,
        fbArbiter:= GVL_PMPS.fbArbiter );

    //VRC 10
    qRIXS_SC_VRC_10.i_xExtILK_OK := qRIXS_SC_PTM_10.iq_stPTM.eState = E_PumpState.pumpRUNNING;
    (*F_TurboGateValve_Protection_ILK( i_Turbo := qRIXS_SC_PTM_10.iq_stPTM ,
                                                                       i_stISG := qRIXS_SC_GPI_01.PG, i_stBSG := qRIXS_ROUGH_GPI_11.PG,
                                                                        ScrollPump := qRIXS_PRO_01.stPump );
    *)
    qRIXS_SC_VRC_10(i_xOverrideMode:=xSystemOverrideMode , iq_stValve=> );

    //VRC 20
    qRIXS_SC_VRC_20.i_xExtILK_OK := F_TurboGateValve_Protection_ILK( i_Turbo := qRIXS_SC_PTM_20.iq_stPTM ,
                                                                       i_stISG := qRIXS_SSL_GCP_20.PG, i_stBSG := qRIXS_ROUGH_GPI_11.PG,
                                                                        ScrollPump := qRIXS_PRO_01.stPump );

    qRIXS_SC_VRC_20(i_xOverrideMode:=xSystemOverrideMode , iq_stValve=> );


    //VRC 30
    qRIXS_SC_VRC_30.i_xExtILK_OK := F_TurboGateValve_Protection_ILK( i_Turbo := qRIXS_SC_PTM_30.iq_stPTM ,
                                                                       i_stISG := qRIXS_SSL_GCP_30.PG, i_stBSG := qRIXS_ROUGH_GPI_11.PG,
                                                                        ScrollPump := qRIXS_PRO_01.stPump );

    qRIXS_SC_VRC_30(i_xOverrideMode:=xSystemOverrideMode , iq_stValve=> );

    //PTM ILK
    //qRIXS_SC_PTM_10_ILK(i_stValve:=qRIXS_ROUGH_VRC_02.iq_stValve, i_stPump:=qRIXS_SC_PTM_10.iq_stPTM, tDelay:=T#200S, bILK=>);
    qRIXS_SC_PTM_10(i_xExtIlkOK:=(*qRIXS_SC_PTM_10_ILK.bILK
                    AND *)F_TurboExtILKLogic_2(Turbo:=qRIXS_SC_PTM_10.iq_stPTM,BackingGauge:=qRIXS_ROUGH_GPI_02.PG, InletGauge:=qRIXS_SC_GPI_01.PG, ScrollPump:= qRIXS_PRO_01.stPump) );

    //qRIXS_SC_PTM_20_ILK(i_stValve:=qRIXS_ROUGH_VRC_02.iq_stValve, i_stPump:=qRIXS_SC_PTM_20.iq_stPTM, tDelay:=T#200S, bILK=>);
    qRIXS_SC_PTM_20(i_xExtIlkOK:=(*qRIXS_SC_PTM_20_ILK.bILK
                    AND *)F_TurboExtILKLogic_2(Turbo:=qRIXS_SC_PTM_20.iq_stPTM,BackingGauge:=qRIXS_ROUGH_GPI_02.PG, InletGauge:=qRIXS_SSL_GCP_20.PG, ScrollPump:= qRIXS_PRO_01.stPump) );

    //qRIXS_SC_PTM_30_ILK(i_stValve:=qRIXS_ROUGH_VRC_02.iq_stValve, i_stPump:=qRIXS_SC_PTM_30.iq_stPTM, tDelay:=T#200S, bILK=>);
    qRIXS_SC_PTM_30(i_xExtIlkOK:=(*qRIXS_SC_PTM_30_ILK.bILK
                AND*) F_TurboExtILKLogic_2(Turbo:=qRIXS_SC_PTM_30.iq_stPTM,BackingGauge:=qRIXS_ROUGH_GPI_02.PG, InletGauge:=qRIXS_SSL_GCP_30.PG, ScrollPump:= qRIXS_PRO_01.stPump) );

    END_PROGRAM


Related:
    * `FB_ChemRIXS_Turbo_ILK`_
    * `GVL_PMPS`_


PRG_SDS
^^^^^^^

::

    PROGRAM PRG_SDS
    VAR
    END_VAR
    //MKS 275 Gauges
    fb_QRIX_SDS_GPI_01(PG=>);
    fb_QRIX_ROUGH_GPI_03(PG=>);
    fb_QRIX_ROUGH_GPI_04(PG=>);

    //VVC
    fb_QRIX_SDS_VVC_01(i_xExtILK_OK := TRUE, i_xOverrideMode := xSystemOverrideMode, iq_stValve => );
    fb_QRIX_SDS_VVC_02(i_xExtILK_OK := TRUE, i_xOverrideMode := xSystemOverrideMode, iq_stValve => );

    //VRC
    (*fb_QRIX_SDS_VRC_01(i_xOverrideMode := xSystemOverrideMode, iq_stValve =>);
    fb_QRIX_SDS_VRC_01.i_xExtILK_OK := F_TurboGateValve_Protection_ILK( i_Turbo := QRIX_SD_PTM_01.iq_stPTM ,
                                                                       i_stISG := fb_QRIX_SDS_GPI_01.PG, i_stBSG := fb_QRIX_SC_GPI_01.PG,
                                                                        ScrollPump := fb_QRIX_PRO_01 );

    *)

    END_PROGRAM




PRG_SPA
^^^^^^^

::

    PROGRAM PRG_SPA
    VAR
        xExtILK_OK_OPT : BOOL := True;
        xExtILK_OK_BLW : BOOL;
        xExtILK_OK_DET : BOOL;
        iPressTorrerance : REAL := 1.0; // Torr
        stUSG_dummy : ST_VG;
    END_VAR
    (* Gamma Ion Pump *)
        qRIXS_OPT_PIP_01(i_stGauge:=qRIXS_OPT_GPI_01.PG, i_xOverrideMode:= xSystemOverrideMode);
        qRIXS_DET_PIP_01(i_stGauge:=qRIXS_DET_GPI_01.PG, i_xOverrideMode:= xSystemOverrideMode);

    (* Pirani MKS 275 Gauges *)
        qRIXS_OPT_GPI_01(PG=>);
        qRIXS_DET_GPI_01(PG=>);

    (* Full Range Gauges *)
        qRIXS_SA_GCP_01(PG=>);

    (* Cold Cathode Gauges *)
        qRIXS_OPT_GCC_01.M_SetBits(30518);
        qRIXS_OPT_GCC_01(PG:=qRIXS_OPT_GPI_01.PG, IG=>, bEP:=TRUE);
        qRIXS_DET_GCC_01.M_SetBits(30518);
        qRIXS_DET_GCC_01(PG:=qRIXS_DET_GPI_01.PG, IG=>, bEP:=TRUE);

    (* Normally Closed Vate Valve *)
    //(*
        stUSG_dummy := qRIXS_OPT_GCC_01.IG;
        qRIXS_OPT_VGC_01(
            i_stUSG := stUSG_dummy,
            i_stDSG := qRIXS_OPT_GCC_01.IG,
            i_xExt_OK := xExtILK_OK_OPT,
            i_xOverrideMode:=xSystemOverrideMode,
            io_fbFFHWO := GVL_PMPS.fbFastFaultOutput1,
            fbArbiter := GVL_PMPS.fbArbiter,
            iq_stValve =>,
        );
    // *)
    // (*
    // Calc pressure Difference
    xExtILK_OK_BLW := 	( qRIXS_OPT_VGC_01.iq_stValve.i_xClsLS AND qRIXS_OPT_GPI_01.PG.xPRESS_OK AND qRIXS_SA_GCP_01.PG.xPRESS_OK AND (qRIXS_OPT_GPI_01.PG.rPRESS - qRIXS_SA_GCP_01.PG.rPRESS) < iPressTorrerance)
                        OR (qRIXS_OPT_GCC_01.IG.xPRESS_OK AND qRIXS_SA_GCP_01.PG.xPRESS_OK AND (qRIXS_OPT_GCC_01.IG.rPRESS - qRIXS_SA_GCP_01.PG.rPRESS) < iPressTorrerance);

    qRIXS_SA_VWC_01(
            i_xExtILK_OK := xExtILK_OK_BLW,
            i_xOverrideMode:=xSystemOverrideMode,
            iq_stValve =>
        );
    // *)
    // (*
        qRIXS_DET_VRC_01(
            i_xExtILK_OK := xExtILK_OK_DET,
            i_xOverrideMode:=xSystemOverrideMode,
            iq_stValve =>,
        );
    // *)


    xExtILK_OK_DET := 	(qRIXS_DET_GPI_01.PG.xPRESS_OK AND qRIXS_SA_GCP_01.PG.xPRESS_OK AND (qRIXS_DET_GPI_01.PG.rPRESS - qRIXS_SA_GCP_01.PG.rPRESS) < iPressTorrerance)
                        OR (qRIXS_DET_GCC_01.IG.xPRESS_OK AND qRIXS_SA_GCP_01.PG.xPRESS_OK AND (qRIXS_DET_GCC_01.IG.rPRESS - qRIXS_SA_GCP_01.PG.rPRESS) < iPressTorrerance);

    END_PROGRAM


Related:
    * `GVL_PMPS`_

